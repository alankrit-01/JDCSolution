const express = require('express');
// const Web3 = require('web3');
const ethers = require('ethers');
require('dotenv').config()


const app = express();

var contractAbi={
  "_format": "hh-sol-artifact-1",
  "contractName": "Supplychain",
  "sourceName": "contracts/Supplychain.sol",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "BatchIDToProductIDMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "BatchIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "BatchMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "BatchID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "BatchSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "AmountSold",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "BatchDescription",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "ProductTemplateID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "Factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "Distributor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "Retailer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "FactoryLocation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "DateOfProduction",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "state",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "BatchTemplateIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "BatchTemplateMAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "batchTemplateID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "productTemplateID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "batchSize",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "factoryADDRESS",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ProductIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ProductMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ProductID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ProductTemplateID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "DOM",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "Owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "DateWhenSold",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ProductTemplateIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ProductTemplateMAP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "productTemplateID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_batchTemplateID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_productTemplateID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_batchSize",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_factoryADDRESS",
          "type": "address"
        }
      ],
      "name": "addBatchTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_productTemplateID",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "addProductTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchID",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "productIDs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "batchSize",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "batchDescription",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "productTemplateID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "factoryLocation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "dateOfProduction",
          "type": "string"
        }
      ],
      "name": "batchProduced",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "retailer",
          "type": "address"
        }
      ],
      "name": "distributorSellToRetailer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllBatchIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllBatchTemplateIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProductIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllProductTemplateIDs",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchID",
          "type": "uint256"
        }
      ],
      "name": "getProductIdsForaBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "batchID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "productID",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "customer",
          "type": "address"
        }
      ],
      "name": "retailerSellToCustomer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "",
  "linkReferences": {},
  "deployedLinkReferences": {}
}


// let contractAddress ="0xEEd5B8edC86013C360E87Ff39a28159DdDC1D9e8"; V1
let contractAddress ="0x433689100038DC94E44F90f75D82cB8230Da4Eb4"; // V2 
let contract;
app.use(express.json()); 

const connectToMatic = async () => {
  try {    
    // const provider = new ethers.providers.InfuraProvider(network, infuraKey);
    const provider = new ethers.providers.JsonRpcProvider("https://rpc-mumbai.maticvigil.com");
    // console.log(provider);  
    const signer = new ethers.Wallet(process.env.PRIVATEKEY, provider);  
    // console.log(signer);   
    const contractInstance = new ethers.Contract(contractAddress, contractAbi.abi, signer);
    contract =contractInstance;
    // console.log(await contractInstance.getAllProductTemplateIDs())
    // const tx =await contractInstance.addProductTemplate(1234132,"Tommy Hilfiger Watch","Men Black Analogue Watch Black");
    // const tx =await contractInstance.batchProduced(                                      
    //   363618,// batchID                                                 
    //   [477173,382171], // Array of product Ids               
    //   2,// Batch Size                                               
    //   "Batch of 3 Jeans",// Batch Description                                        
    //   1234132,// Product temlplate ID                                    
    //   "0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199",// factory address     
    //   "0xdD2FD4581271e230360230F9337D5c0430Bf44C0",// distributor address
    //   "My Factory location",// factory Location                                   
    //   "1223123"// dateOfProduction                                         
    // )   
    // await tx.wait(); 

  } catch (err) {
    console.log(err);
    throw new Error(err?.message || "Something Went Wrong");
  }
}


connectToMatic();


////////////////// API FOR DISTIBUTOR ////////////////////

app.get('/api/viewAvailableBatches', async (req, res) => {
  try {
    let result=[]; 
    const distibutor= req.query.distibutor;
    const IDs =await contract.getAllBatchIDs();
    
    for(let i=0; i<IDs.length; i++){ 
      const batchData =await contract.BatchMapping(IDs[i]);
      if(batchData.Distributor==distibutor && batchData.state==0){
        const productIDs= (await contract.getProductIdsForaBatch(IDs[i]));
        result.push({
          "batchID":IDs[i].toNumber(),
          "productIDs":productIDs ,
          "batchData":{
            BatchID :batchData[0].toNumber(),
            BatchSize :batchData[1].toNumber(),
            AmountSold :batchData[2].toNumber(),
            BatchDescription :batchData[3],
            ProductTemplateID: batchData[4].toNumber(),
            Factory:batchData[5],
            Distributor:batchData[6],
            Retailer:batchData[7],
            FactoryLocation:batchData[8],
            DateOfProduction:batchData[9],
            state:batchData[10].toNumber(),
          }
        })
      } 
    }
    if(result){
      res.status(200).json({status:"success", message:result});
    }else {
      res.status(200).json({status:"success", message:"Returned data is empty"});
    }
  } catch (error) {
    console.log(error.message);
    res.status(400).send({ error: error.message });
  } 
});

app.post('/api/distributorSellToRetailer',async(req,res)=>{
  try {
    const batchID =req.body.batchID;
    const retailerAddress =req.body.retailerAddress;
    const tx =await contract.distributorSellToRetailer(batchID,retailerAddress);
    tx.wait();
    res.status(200).json({status:"success", message:"Batch sold to retailer"});
  } catch (error) {
    console.log(error.message);
    res.status(400).send({ error: error.message });
  }
})


app.get('/api/viewSendBatches', async (req, res) => {
  try {
    let result=[];
    const distibutor= req.query.distibutor;
    const IDs =await contract.getAllBatchIDs();
    for(let i=0; i<IDs.length; i++){
      const batchData =await contract.BatchMapping(IDs[i]);
      if(batchData.Distributor==distibutor && batchData.state==1){
        const productIDs= (await contract.getProductIdsForaBatch(IDs[i]));
        result.push({
          "batchID":IDs[i].toNumber(),
          "productIDs":productIDs ,
          "batchData":{
            BatchID :batchData[0].toNumber(),
            BatchSize :batchData[1].toNumber(),
            AmountSold :batchData[2].toNumber(),
            BatchDescription :batchData[3],
            ProductTemplateID: batchData[4].toNumber(),
            Factory:batchData[5],
            Distributor:batchData[6],
            Retailer:batchData[7],
            FactoryLocation:batchData[8],
            DateOfProduction:batchData[9],
            state:batchData[10].toNumber(),
          }
        })
      } 
    }
    if(result){
      res.status(200).json({status:"success", message:result});
    }else {
      res.status(200).json({status:"success", message:"Returned data is empty"});
    }
  } catch (error) {
    console.log(error.message);
    res.status(400).send({ error: error.message });
  } 
});



////////////////// API FOR RETAILER ////////////////////

app.get('/api/viewBatchesForRetailer', async (req, res) => {
  try {
    let result=[];
    const retailer= req.query.retailer;
    const IDs =await contract.getAllBatchIDs();
    for(let i=0; i<IDs.length; i++){
      const batchData =await contract.BatchMapping(IDs[i]);
      if(batchData.Retailer==retailer && batchData.state==1){
        let productInfo=[]; 
        const productIDs= await contract.getProductIdsForaBatch(IDs[i]);
        for(let j=0; j<productIDs.length; j++){
          productInfo.push(await contract.ProductMapping(productIDs[j]));
        }
        // console.log(productInfo[0]);
        result.push({
          "batchID":IDs[i].toNumber(),
          "productIDs":productIDs ,
          "batchData":{
            BatchID :batchData[0].toNumber(),
            BatchSize :batchData[1].toNumber(),
            AmountSold :batchData[2].toNumber(),
            BatchDescription :batchData[3],
            ProductTemplateID: batchData[4].toNumber(),
            Factory:batchData[5],
            Distributor:batchData[6],
            Retailer:batchData[7],
            FactoryLocation:batchData[8],
            DateOfProduction:batchData[9],
            state:batchData[10].toNumber(),
          },
          "productInfo":productInfo
        })
      } 
    }
    if(result){
      res.status(200).json({status:"success", message:result});
    }else {
      res.status(200).json({status:"success", message:"Returned data is empty"});
    }
  } catch (error) {
    console.log(error.message);
    res.status(400).send({ error: error.message });
  }
});   

app.post('/api/sellToCustomer',async(req,res)=>{
  try {
    const batchID =req.body.batchID;
    const productID =req.body.productID;
    const customerAddress =req.body.customerAddress;
    const tx =await contract.retailerSellToCustomer(batchID,productID,customerAddress);
    tx.wait();
    res.status(200).json({status:"success", message:"Product sold to customer"});
  } catch (error) {
    console.log(error.message);
    res.status(400).send({ error: error.message });
  }
})




////////////////// API FOR CUSTOMERS ////////////////////



app.get('/', function (req, res) {
    // console.log(web3)
    res.send('Hello World');
})
 
var server = app.listen(8082, function () {
    console.log("Example app listening at http://127:0:0:1:8082")
})